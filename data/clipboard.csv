timestamp,content,window_title,process,pid
2025-10-04 18:34:01,"2025-10-04 17:28:22,copy,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 17:28:22\r\n2025-10-04 17:28:25,paste,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 17:28:25\r\n2025-10-04 17:40:19,copy,ProcessBot automation hackathon – Opera,opera.exe,18264,2025-10-04 17:40:19\r\n2025-10-04 17:40:35,paste,Submit a new project | ChallengeRocket.com – Opera,opera.exe,18264,2025-10-04 17:40:35\r\n2025-10-04 17:43:08,copy,summarise - Szukaj w Google – Opera,opera.exe,18264,2025-10-04 17:43:08\r\n2025-10-04 17:43:12,paste,Submit a new project | ChallengeRocket.com – Opera,opera.exe,18264,2025-10-04 17:43:12\r\n2025-10-04 17:44:42,copy,ProcessBot automation hackathon – Opera,opera.exe,18264,2025-10-04 17:44:42\r\n2025-10-04 17:44:47,paste,Submit a new project | ChallengeRocket.com – Opera,opera.exe,18264,2025-10-04 17:44:47\r\n2025-10-04 17:45:53,copy,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 17:45:53\r\n2025-10-04 18:05:29,copy,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 18:05:29\r\n2025-10-04 18:05:31,copy,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 18:05:31\r\n2025-10-04 18:20:21,copy,Command Prompt - app.py,WindowsTerminal.exe,10672,2025-10-04 18:20:21\r\n2025-10-04 18:22:29,copy,events.csv - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 18:22:29\r\n2025-10-04 18:24:48,copy,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256,2025-10-04 18:24:48\r\n",Command Prompt - app.py,WindowsTerminal.exe,16848
2025-10-04 18:35:50,"def plot_process_network(self, output_html: str = None):\r\n        """"""Tworzy interaktywny wykres sieci przejść między procesami.""""""\r\n        df = self.data.copy()\r\n        df['next_process'] = df['process'].shift(-1)\r\n        \r\n        # usuwamy powtarzające się procesy z rzędu (brak ""przejścia"")\r\n        df = df[df['process'] != df['next_process']]\r\n        \r\n        # liczba przejść między procesami\r\n        transitions = df.groupby(['process', 'next_process']).size().reset_index(name='count')\r\n        \r\n        # budowa grafu NetworkX\r\n        G = nx.DiGraph()\r\n        for _, row in transitions.iterrows():\r\n            G.add_edge(row['process'], row['next_process'], weight=row['count'])\r\n        \r\n        pos = nx.spring_layout(G, seed=42)  # rozmieszczenie węzłów\r\n        \r\n        # przygotowanie danych do Plotly\r\n        edge_x, edge_y = [], []\r\n        for edge in G.edges():\r\n            x0, y0 = pos[edge[0]]\r\n            x1, y1 = pos[edge[1]]\r\n            edge_x.extend([x0, x1, None])\r\n            edge_y.extend([y0, y1, None])\r\n        \r\n        edge_trace = go.Scatter(\r\n            x=edge_x, y=edge_y,\r\n            line=dict(width=1, color='#888'),\r\n            hoverinfo='none',\r\n            mode='lines'\r\n        )\r\n        \r\n        node_x, node_y, node_text, node_size = [], [], [], []\r\n        for node in G.nodes():\r\n            x, y = pos[node]\r\n            node_x.append(x)\r\n            node_y.append(y)\r\n            node_text.append(node)\r\n            degree = G.degree(node)\r\n            node_size.append(10 + degree * 5)\r\n        \r\n        node_trace = go.Scatter(\r\n            x=node_x, y=node_y,\r\n            mode='markers+text',\r\n            text=node_text,\r\n            textposition='top center',\r\n            hoverinfo='text',\r\n            marker=dict(\r\n                showscale=True,\r\n                colorscale='YlGnBu',\r\n                color=[G.degree(n) for n in G.nodes()],\r\n                size=node_size,\r\n                colorbar=dict(\r\n                    title='Stopień węzła',\r\n                    thickness=15,\r\n                    xanchor='left',\r\n                    titleside='right'\r\n                ),\r\n                line_width=2\r\n            )\r\n        )\r\n        \r\n        fig = go.Figure(data=[edge_trace, node_trace],\r\n                        layout=go.Layout(\r\n                            title='Sieć przejść między procesami',\r\n                            title_x=0.5,\r\n                            showlegend=False,\r\n                            hovermode='closest',\r\n                            margin=dict(b=0, l=0, r=0, t=40),\r\n                            template='plotly_dark'\r\n                        ))\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres sieci zapisano do pliku: {output_html}"")\r\n        return fig",Narzędzia do wykresów interaktywnych – Opera,opera.exe,18264
2025-10-04 18:36:09,import networkx as nx,Przełączanie zadań,explorer.exe,16892
2025-10-04 18:36:17,networkx,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:37:00,plot_process_network,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:37:32,    fig.show()\r\n,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:38:37,"  File ""c:\Users\trzeb\Desktop\hack\Hackaton\Process_analyse\proc_analysis.py"", line 78, in plot_process_network\r\n    edge_trace = nx.go.Scatter(",Narzędzia do wykresów interaktywnych – Opera,opera.exe,18264
2025-10-04 18:39:19,"  File ""c:\Users\trzeb\Desktop\hack\Hackaton\Process_analyse\proc_analysis.py"", line 78, in plot_process_network\r\n    edge_trace = go.Scatter(",Narzędzia do wykresów interaktywnych – Opera,opera.exe,18264
2025-10-04 18:41:33,titleside,proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:42:59,                    title='right'\r\n,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:48:05,"class ProcessAnalyzer:\r\n    def __init__(self, csv_path: str):\r\n        """"""Inicjalizacja: wczytanie danych z CSV.""""""\r\n        self.data = pd.read_csv(csv_path)\r\n        self.data['timestamp'] = pd.to_datetime(self.data['timestamp'])\r\n        self.data.sort_values(by='timestamp', inplace=True)\r\n    \r\n    def calculate_time_spent(self):\r\n        """"""Liczy czas spędzony w każdym procesie na podstawie różnicy czasów.""""""\r\n        df = self.data.copy()\r\n        df['next_timestamp'] = df['timestamp'].shift(-1)\r\n        df['duration'] = (df['next_timestamp'] - df['timestamp']).fillna(pd.Timedelta(seconds=0))\r\n        \r\n        # Grupowanie po procesach\r\n        time_spent = df.groupby('process')['duration'].sum().reset_index()\r\n        time_spent['minutes'] = time_spent['duration'].dt.total_seconds() / 60\r\n        \r\n        self.time_spent = time_spent\r\n        return time_spent\r\n    \r\n    def plot_time_spent(self, output_html: str = None):\r\n        """"""Tworzy interaktywny wykres Plotly i opcjonalnie zapisuje jako HTML.""""""\r\n        if not hasattr(self, 'time_spent'):\r\n            self.calculate_time_spent()\r\n        \r\n        fig = px.bar(\r\n            self.time_spent,\r\n            x='process',\r\n            y='minutes',\r\n            color='process',\r\n            title='Czas spędzony w poszczególnych procesach (minuty)',\r\n            text_auto='.2f',\r\n        )\r\n        fig.update_layout(\r\n            xaxis_title='Proces',\r\n            yaxis_title='Czas [minuty]',\r\n            showlegend=False,\r\n            template='plotly_dark',\r\n            hovermode='x unified'\r\n        )\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres zapisano do pliku: {output_html}"")\r\n        return fig\r\n    \r\n    def plot_process_network(self, output_html: str = None):\r\n        """"""Tworzy interaktywny wykres sieci przejść między procesami.""""""\r\n        df = self.data.copy()\r\n        df['next_process'] = df['process'].shift(-1)\r\n        \r\n        # usuwamy powtarzające się procesy z rzędu (brak ""przejścia"")\r\n        df = df[df['process'] != df['next_process']]\r\n        \r\n        # liczba przejść między procesami\r\n        transitions = df.groupby(['process', 'next_process']).size().reset_index(name='count')\r\n        \r\n        # budowa grafu NetworkX\r\n        G = nx.DiGraph()\r\n        for _, row in transitions.iterrows():\r\n            G.add_edge(row['process'], row['next_process'], weight=row['count'])\r\n        \r\n        pos = nx.spring_layout(G, seed=42)  # rozmieszczenie węzłów\r\n        \r\n        # przygotowanie danych do Plotly\r\n        edge_x, edge_y = [], []\r\n        for edge in G.edges():\r\n            x0, y0 = pos[edge[0]]\r\n            x1, y1 = pos[edge[1]]\r\n            edge_x.extend([x0, x1, None])\r\n            edge_y.extend([y0, y1, None])\r\n        \r\n        edge_trace = go.Scatter(\r\n            x=edge_x, y=edge_y,\r\n            line=dict(width=1, color='#888'),\r\n            hoverinfo='none',\r\n            mode='lines'\r\n        )\r\n        \r\n        node_x, node_y, node_text, node_size = [], [], [], []\r\n        for node in G.nodes():\r\n            x, y = pos[node]\r\n            node_x.append(x)\r\n            node_y.append(y)\r\n            node_text.append(node)\r\n            degree = G.degree(node)\r\n            node_size.append(10 + degree * 5)\r\n        \r\n        node_trace = go.Scatter(\r\n            x=node_x, y=node_y,\r\n            mode='markers+text',\r\n            text=node_text,\r\n            textposition='top center',\r\n            hoverinfo='text',\r\n            marker=dict(\r\n                showscale=True,\r\n                colorscale='YlGnBu',\r\n                color=[G.degree(n) for n in G.nodes()],\r\n                size=node_size,\r\n                colorbar=dict(\r\n                    title='Stopień węzła',\r\n                    thickness=15,\r\n                    xanchor='left'  \r\n                ),\r\n                line_width=2\r\n            )\r\n        )\r\n        \r\n        fig = go.Figure(data=[edge_trace, node_trace],\r\n                        layout=go.Layout(\r\n                            title='Sieć przejść między procesami',\r\n                            title_x=0.5,\r\n                            showlegend=False,\r\n                            hovermode='closest',\r\n                            margin=dict(b=0, l=0, r=0, t=40),\r\n                            template='plotly_dark'\r\n                        ))\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres sieci zapisano do pliku: {output_html}"")\r\n        return fig",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:49:51,column,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:54:04,"    def plot_process_network(self, output_html: str = None, column: str = 'process'):\r\n        """"""Tworzy interaktywny wykres sieci przejść między procesami.""""""\r\n        df = self.data.copy()\r\n        df['next_process'] = df[column].shift(-1)\r\n        \r\n        # usuwamy powtarzające się procesy z rzędu (brak ""przejścia"")\r\n        df = df[df[column] != df['next_process']]\r\n        \r\n        # liczba przejść między procesami\r\n        transitions = df.groupby([column, 'next_process']).size().reset_index(name='count')\r\n        \r\n        # budowa grafu NetworkX\r\n        G = nx.DiGraph()\r\n        for _, row in transitions.iterrows():\r\n            G.add_edge(row[column], row['next_process'], weight=row['count'])\r\n        \r\n        pos = nx.spring_layout(G, seed=42)  # rozmieszczenie węzłów\r\n        \r\n        # przygotowanie danych do Plotly\r\n        edge_x, edge_y = [], []\r\n        for edge in G.edges():\r\n            x0, y0 = pos[edge[0]]\r\n            x1, y1 = pos[edge[1]]\r\n            edge_x.extend([x0, x1, None])\r\n            edge_y.extend([y0, y1, None])\r\n        \r\n        edge_trace = go.Scatter(\r\n            x=edge_x, y=edge_y,\r\n            line=dict(width=1, color='#888'),\r\n            hoverinfo='none',\r\n            mode='lines'\r\n        )\r\n        \r\n        node_x, node_y, node_text, node_size = [], [], [], []\r\n        for node in G.nodes():\r\n            x, y = pos[node]\r\n            node_x.append(x)\r\n            node_y.append(y)\r\n            node_text.append(node)\r\n            degree = G.degree(node)\r\n            node_size.append(10 + degree * 5)\r\n        \r\n        node_trace = go.Scatter(\r\n            x=node_x, y=node_y,\r\n            mode='markers+text',\r\n            text=node_text,\r\n            textposition='top center',\r\n            hoverinfo='text',\r\n            marker=dict(\r\n                showscale=True,\r\n                colorscale='YlGnBu',\r\n                color=[G.degree(n) for n in G.nodes()],\r\n                size=node_size,\r\n                colorbar=dict(\r\n                    title='Stopień węzła',\r\n                    thickness=15,\r\n                    xanchor='left'  \r\n                ),\r\n                line_width=2\r\n            )\r\n        )\r\n        \r\n        fig = go.Figure(data=[edge_trace, node_trace],\r\n                        layout=go.Layout(\r\n                            title='Sieć przejść między procesami',\r\n                            title_x=0.5,\r\n                            showlegend=False,\r\n                            hovermode='closest',\r\n                            margin=dict(b=0, l=0, r=0, t=40),\r\n                            template='plotly_dark'\r\n                        ))\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres sieci zapisano do pliku: {output_html}"")\r\n        return fig\r\n",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:57:15,node_size.append(20 * (1 + degree/max_degree)),proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 18:57:33,max_degree = max(dict(G.degree()).values()),● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:03:06,"    fig = analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:03:21,"    fig = analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n",● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:06:52,'Sieć przejść między procesami' if column == 'process' else 'Sieć przejść między podprocesami',● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:08:55,'process',● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:09:44,"    fig = analyzer.plot_time_spent(""plotly/czas_title.html"", 'title')\r\n",● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:11:03,"import pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom datetime import timedelta\r\nimport networkx as nx\r\n\r\nclass ProcessAnalyzer:\r\n    def __init__(self, csv_path: str):\r\n        """"""Inicjalizacja: wczytanie danych z CSV.""""""\r\n        self.data = pd.read_csv(csv_path)\r\n        self.data['timestamp'] = pd.to_datetime(self.data['timestamp'])\r\n        self.data.sort_values(by='timestamp', inplace=True)\r\n    \r\n    def calculate_time_spent(self, column: str = 'process') -> pd.DataFrame:\r\n        """"""Liczy czas spędzony w każdym procesie na podstawie różnicy czasów.""""""\r\n        df = self.data.copy()\r\n        df['next_timestamp'] = df['timestamp'].shift(-1)\r\n        df['duration'] = (df['next_timestamp'] - df['timestamp']).fillna(pd.Timedelta(seconds=0))\r\n        \r\n        # Grupowanie po procesach\r\n        time_spent = df.groupby(column)['duration'].sum().reset_index()\r\n        time_spent['minutes'] = time_spent['duration'].dt.total_seconds() / 60\r\n        \r\n        self.time_spent = time_spent\r\n        return time_spent\r\n    \r\n    def plot_time_spent(self, output_html: str = None):\r\n        """"""Tworzy interaktywny wykres Plotly i opcjonalnie zapisuje jako HTML.""""""\r\n        if not hasattr(self, 'time_spent'):\r\n            self.calculate_time_spent()\r\n        \r\n        fig = px.bar(\r\n            self.time_spent,\r\n            x='process',\r\n            y='minutes',\r\n            color='process',\r\n            title='Czas spędzony w poszczególnych procesach (minuty)',\r\n            text_auto='.2f'\r\n        )\r\n        fig.update_layout(\r\n            xaxis_title='Proces',\r\n            yaxis_title='Czas [minuty]',\r\n            showlegend=False,\r\n            template='plotly_dark',\r\n            hovermode='x unified'\r\n        )\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres zapisano do pliku: {output_html}"")\r\n        return fig\r\n    \r\n    def plot_process_network(self, output_html: str = None, column: str = 'process'):\r\n        """"""Tworzy interaktywny wykres sieci przejść między procesami.""""""\r\n        df = self.data.copy()\r\n        df['next_process'] = df[column].shift(-1)\r\n        \r\n        # usuwamy powtarzające się procesy z rzędu (brak ""przejścia"")\r\n        df = df[df[column] != df['next_process']]\r\n        \r\n        # liczba przejść między procesami\r\n        transitions = df.groupby([column, 'next_process']).size().reset_index(name='count')\r\n        \r\n        # budowa grafu NetworkX\r\n        G = nx.DiGraph()\r\n        for _, row in transitions.iterrows():\r\n            G.add_edge(row[column], row['next_process'], weight=row['count'])\r\n        \r\n        pos = nx.spring_layout(G, seed=42)  # rozmieszczenie węzłów\r\n        \r\n        # przygotowanie danych do Plotly\r\n        edge_x, edge_y = [], []\r\n        for edge in G.edges():\r\n            x0, y0 = pos[edge[0]]\r\n            x1, y1 = pos[edge[1]]\r\n            edge_x.extend([x0, x1, None])\r\n            edge_y.extend([y0, y1, None])\r\n        \r\n        edge_trace = go.Scatter(\r\n            x=edge_x, y=edge_y,\r\n            line=dict(width=1, color='#888'),\r\n            hoverinfo='none',\r\n            mode='lines'\r\n        )\r\n        \r\n        node_x, node_y, node_text, node_size = [], [], [], []\r\n        max_degree = max(dict(G.degree()).values())\r\n        for node in G.nodes():\r\n            x, y = pos[node]\r\n            node_x.append(x)\r\n            node_y.append(y)\r\n            node_text.append(node)\r\n            degree = G.degree(node)\r\n            node_size.append(20 * (1 + degree/max_degree))\r\n        \r\n        node_trace = go.Scatter(\r\n            x=node_x, y=node_y,\r\n            mode='markers+text',\r\n            text=node_text,\r\n            textposition='top center',\r\n            hoverinfo='text',\r\n            marker=dict(\r\n                showscale=True,\r\n                colorscale='YlGnBu',\r\n                color=[G.degree(n) for n in G.nodes()],\r\n                size=node_size,\r\n                colorbar=dict(\r\n                    title='Stopień węzła',\r\n                    thickness=15,\r\n                    xanchor='left'  \r\n                ),\r\n                line_width=2\r\n            )\r\n        )\r\n        \r\n        fig = go.Figure(data=[edge_trace, node_trace],\r\n                        layout=go.Layout(\r\n                            title='Sieć przejść między procesami' if column == 'process' else 'Sieć przejść między podprocesami',\r\n                            title_x=0.5,\r\n                            showlegend=False,\r\n                            hovermode='closest',\r\n                            margin=dict(b=0, l=0, r=0, t=40),\r\n                            template='plotly_dark'\r\n                        ))\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres sieci zapisano do pliku: {output_html}"")\r\n        return fig\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    analyzer = ProcessAnalyzer(""data/corporate_workflow_data.csv"")\r\n    print(analyzer.calculate_time_spent())\r\n\r\n    fig = analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n    fig = analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n    fig = analyzer.plot_process_network(""plotly/siec_process.html"")\r\n",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:16:35,"sizemode='diameter',  # tryb skalowania\r\n                sizeref=2 * max(node_size) / (40 ** 2),  # automatyczne skalowanie\r\n                sizemin=6,  # minimalny rozmiar węzła",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:16:53,autosize=True ,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:18:54,"                sizeref=2 * max(node_size) / (40 ** 2),  # automatyczne skalowanie\r\n",● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:23:40,G.degree(node),proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:24:11,[G.degree(n) for n in G.nodes()],proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:24:54,degree,proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:26:21,degrees,proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:26:40,            node_size.append(20 * (1 + degree/max_degree))\r\n,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:26:41,node_size,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:29:40,"<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n    <meta charset=""UTF-8"">\r\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n    <title>ProcessBot Analytics</title>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js""></script>\r\n    <style>",JSON data file management - Claude – Opera,opera.exe,18264
2025-10-04 19:45:51,"* { margin: 0; padding: 0; box-sizing: border-box; }\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh; padding: 20px;\r\n        }\r\n        .container { max-width: 1400px; margin: 0 auto; }\r\n        .header { text-align: center; color: white; margin-bottom: 40px; }\r\n        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\r\n        .header p { font-size: 1.2em; opacity: 0.9; }\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n        .stat-card:hover { transform: translateY(-5px); }\r\n        .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }\r\n        .stat-value { font-size: 2.5em; font-weight: bold; color: #667eea; }\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n        .chart-title { font-size: 1.8em; color: #333; margin-bottom: 20px; text-align: center; }\r\n        #sankey-chart { width: 100%; height: 600px; overflow: visible; }\r\n        #heatmaps-container img { max-width: 100%; border-radius: 10px; margin-bottom: 10px; }\r\n        .loading { text-align: center; padding: 40px; color: #666; font-size: 1.2em; }\r\n        .node rect { fill-opacity: 0.9; stroke: #000; stroke-width: 1px; }\r\n        .node text { font-size: 12px; fill: #333; font-weight: 500; }\r\n        .link { fill: none; stroke-opacity: 0.3; }\r\n        .link:hover { stroke-opacity: 0.6; }\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }",APP.PY - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:47:18,"* { margin: 0; padding: 0; box-sizing: border-box; }\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh; padding: 20px;\r\n        }\r\n        .container { max-width: 1400px; margin: 0 auto; }\r\n        .header { text-align: center; color: white; margin-bottom: 40px; }\r\n        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\r\n        .header p { font-size: 1.2em; opacity: 0.9; }\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n        .stat-card:hover { transform: translateY(-5px); }\r\n        .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }\r\n        .stat-value { font-size: 2.5em; font-weight: bold; color: #667eea; }\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n        .chart-title { font-size: 1.8em; color: #333; margin-bottom: 20px; text-align: center; }\r\n        #sankey-chart { width: 100%; height: 600px; overflow: visible; }\r\n        #heatmaps-container img { max-width: 100%; border-radius: 10px; margin-bottom: 10px; }\r\n        .loading { text-align: center; padding: 40px; color: #666; font-size: 1.2em; }\r\n        .node rect { fill-opacity: 0.9; stroke: #000; stroke-width: 1px; }\r\n        .node text { font-size: 12px; fill: #333; font-weight: 500; }\r\n        .link { fill: none; stroke-opacity: 0.3; }\r\n        .link:hover { stroke-opacity: 0.6; }\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }",APP.PY - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:50:04,"* { margin: 0; padding: 0; box-sizing: border-box; }\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh; padding: 20px;\r\n        }\r\n        .container { max-width: 1400px; margin: 0 auto; }\r\n        .header { text-align: center; color: white; margin-bottom: 40px; }\r\n        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\r\n        .header p { font-size: 1.2em; opacity: 0.9; }\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n        .stat-card:hover { transform: translateY(-5px); }\r\n        .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }\r\n        .stat-value { font-size: 2.5em; font-weight: bold; color: #667eea; }\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n        .chart-title { font-size: 1.8em; color: #333; margin-bottom: 20px; text-align: center; }\r\n        #sankey-chart { width: 100%; height: 600px; overflow: visible; }\r\n        #heatmaps-container img { max-width: 100%; border-radius: 10px; margin-bottom: 10px; }\r\n        .loading { text-align: center; padding: 40px; color: #666; font-size: 1.2em; }\r\n        .node rect { fill-opacity: 0.9; stroke: #000; stroke-width: 1px; }\r\n        .node text { font-size: 12px; fill: #333; font-weight: 500; }\r\n        .link { fill: none; stroke-opacity: 0.3; }\r\n        .link:hover { stroke-opacity: 0.6; }\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }",APP.PY - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 19:56:22,"<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n    <meta charset=""UTF-8"">\r\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n    <title>ProcessBot Analytics</title>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js""></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 1600px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            text-align: center;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .header h1 {\r\n            font-size: 3em;\r\n            margin-bottom: 10px;\r\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .header p {\r\n            font-size: 1.2em;\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .nav-buttons {\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .nav-button {\r\n            background: white;\r\n            color: #667eea;\r\n            padding: 12px 30px;\r\n            border-radius: 25px;\r\n            text-decoration: none;\r\n            font-weight: bold;\r\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .nav-button:hover {\r\n            transform: translateY(-3px);\r\n            box-shadow: 0 8px 20px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .nav-button.active {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 20px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.5em;\r\n            color: #333;\r\n            margin-bottom: 15px;\r\n            text-align: center;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .chart-wrapper {\r\n            width: 100%;\r\n            min-height: 500px;\r\n            position: relative;\r\n        }\r\n\r\n        .loading {\r\n            text-align: center;\r\n            padding: 60px;\r\n            color: #666;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .loading::after {\r\n            content: '...';\r\n            animation: dots 1.5s steps(4, end) infinite;\r\n        }\r\n\r\n        @keyframes dots {\r\n            0%, 20% { content: '.'; }\r\n            40% { content: '..'; }\r\n            60%, 100% { content: '...'; }\r\n        }\r\n\r\n        .grid-2 {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(700px, 1fr));\r\n            gap: 30px;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n            .grid-2 {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header h1 {\r\n                font-size: 2em;\r\n            }\r\n        }\r\n\r\n        .error-message {\r\n            background: #fee;\r\n            color: #c33;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=""container"">\r\n        <div class=""header"">\r\n            <h1>📊 Advanced Analytics</h1>\r\n            <p>Deep Insights into Your Work Patterns</p>\r\n        </div>\r\n\r\n        <div class=""nav-buttons"">\r\n            <a href=""/"" class=""nav-button"">Dashboard</a>\r\n            <a href=""/analytics"" class=""nav-button active"">Analytics</a>\r\n        </div>\r\n\r\n        <div class=""chart-container"">\r\n            <div class=""chart-title"">Time Spent in Applications</div>\r\n            <div id=""time-spent-chart"" class=""chart-wrapper"">\r\n                <div class=""loading"">Loading chart</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=""chart-container"">\r\n            <div class=""chart-title"">Application Transition Network</div>\r\n            <div id=""network-chart"" class=""chart-wrapper"">\r\n                <div class=""loading"">Loading network graph</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        async function loadTimeSpentChart() {\r\n            try {\r\n                const response = await fetch('/api/plotly/time-spent');\r\n                const data = await response.json();\r\n                \r\n                if (data.error) {\r\n                    document.getElementById('time-spent-chart').innerHTML = \r\n                        `<div class=""error-message"">${data.error}</div>`;\r\n                    return;\r\n                }\r\n\r\n                Plotly.newPlot('time-spent-chart', data.data, data.layout, {\r\n                    responsive: true,\r\n                    displayModeBar: true,\r\n                    modeBarButtonsToRemove: ['lasso2d', 'select2d'],\r\n                    displaylogo: false\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading time spent chart:', error);\r\n                document.getElementById('time-spent-chart').innerHTML = \r\n                    '<div class=""error-message"">Failed to load chart. Please try again.</div>';\r\n            }\r\n        }\r\n\r\n        async function loadNetworkChart() {\r\n            try {\r\n                const response = await fetch('/api/plotly/process-network');\r\n                const data = await response.json();\r\n                \r\n                if (data.error) {\r\n                    document.getElementById('network-chart').innerHTML = \r\n                        `<div class=""error-message"">${data.error}</div>`;\r\n                    return;\r\n                }\r\n\r\n                Plotly.newPlot('network-chart', data.data, data.layout, {\r\n                    responsive: true,\r\n                    displayModeBar: true,\r\n                    modeBarButtonsToRemove: ['lasso2d', 'select2d'],\r\n                    displaylogo: false\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading network chart:', error);\r\n                document.getElementById('network-chart').innerHTML = \r\n                    '<div class=""error-message"">Failed to load chart. Please try again.</div>';\r\n            }\r\n        }\r\n\r\n        // Initialize charts\r\n        window.addEventListener('DOMContentLoaded', () => {\r\n            loadTimeSpentChart();\r\n            loadNetworkChart();\r\n            \r\n            // Refresh every 30 seconds\r\n            setInterval(() => {\r\n                loadTimeSpentChart();\r\n                loadNetworkChart();\r\n            }, 30000);\r\n        });\r\n    </script>\r\n</body>\r\n</html>",JSON data file management - Claude – Opera,opera.exe,18264
2025-10-04 20:00:24,"        <div class=""nav-buttons"">\r\n            <a href=""./index.html"" class=""nav-button"">Dashboard</a>\r\n            <a href=""./analytics.html"" class=""nav-button active"">Analytics</a>\r\n        </div>",● analytics.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:01:21,"        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 1600px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            text-align: center;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .header h1 {\r\n            font-size: 3em;\r\n            margin-bottom: 10px;\r\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .header p {\r\n            font-size: 1.2em;\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .nav-buttons {\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .nav-button {\r\n            background: white;\r\n            color: #667eea;\r\n            padding: 12px 30px;\r\n            border-radius: 25px;\r\n            text-decoration: none;\r\n            font-weight: bold;\r\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .nav-button:hover {\r\n            transform: translateY(-3px);\r\n            box-shadow: 0 8px 20px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .nav-button.active {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 20px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.5em;\r\n            color: #333;\r\n            margin-bottom: 15px;\r\n            text-align: center;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .chart-wrapper {\r\n            width: 100%;\r\n            min-height: 500px;\r\n            position: relative;\r\n        }\r\n\r\n        .loading {\r\n            text-align: center;\r\n            padding: 60px;\r\n            color: #666;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .loading::after {\r\n            content: '...';\r\n            animation: dots 1.5s steps(4, end) infinite;\r\n        }\r\n\r\n        @keyframes dots {\r\n            0%, 20% { content: '.'; }\r\n            40% { content: '..'; }\r\n            60%, 100% { content: '...'; }\r\n        }\r\n\r\n        .grid-2 {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(700px, 1fr));\r\n            gap: 30px;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n            .grid-2 {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header h1 {\r\n                font-size: 2em;\r\n            }\r\n        }\r\n\r\n        .error-message {\r\n            background: #fee;\r\n            color: #c33;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }",● analytics.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:02:29,"    <link rel=""stylesheet"" href=""./style.css"">",● analytics.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:02:48,"<style>\r\n        * { margin: 0; padding: 0; box-sizing: border-box; }\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh; padding: 20px;\r\n        }\r\n        .container { max-width: 1400px; margin: 0 auto; }\r\n        .header { text-align: center; color: white; margin-bottom: 40px; }\r\n        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\r\n        .header p { font-size: 1.2em; opacity: 0.9; }\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n        .stat-card:hover { transform: translateY(-5px); }\r\n        .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }\r\n        .stat-value { font-size: 2.5em; font-weight: bold; color: #667eea; }\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n        .chart-title { font-size: 1.8em; color: #333; margin-bottom: 20px; text-align: center; }\r\n        #sankey-chart { width: 100%; height: 600px; overflow: visible; }\r\n        #heatmaps-container img { max-width: 100%; border-radius: 10px; margin-bottom: 10px; }\r\n        .loading { text-align: center; padding: 40px; color: #666; font-size: 1.2em; }\r\n        .node rect { fill-opacity: 0.9; stroke: #000; stroke-width: 1px; }\r\n        .node text { font-size: 12px; fill: #333; font-weight: 500; }\r\n        .link { fill: none; stroke-opacity: 0.3; }\r\n        .link:hover { stroke-opacity: 0.6; }\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }\r\n    </style>",● index.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:03:32,".stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n        .stat-card:hover { transform: translateY(-5px); }\r\n        .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }\r\n        .stat-value { font-size: 2.5em; font-weight: bold; color: #667eea; }",*style — Notatnik,Notepad.exe,24252
2025-10-04 20:05:34,"    async function loadStats() {\r\n        try {\r\n            const response = await fetch('/api/stats');\r\n            const stats = await response.json();\r\n\r\n            document.getElementById('total-switches').textContent = stats.total_switches;\r\n            document.getElementById('unique-apps').textContent = stats.unique_apps;\r\n            document.getElementById('most-used').textContent = stats.most_used_app;\r\n            document.getElementById('avg-focus').textContent = stats.avg_focus_time + 's';\r\n        } catch (error) { console.error('Error loading stats:', error); }\r\n    }",● index.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:06:34,"    async function loadStats() {\r\n        try {\r\n            const response = await fetch('/api/stats');\r\n            const stats = await response.json();\r\n\r\n            document.getElementById('total-switches').textContent = stats.total_switches;\r\n            document.getElementById('unique-apps').textContent = stats.unique_apps;\r\n            document.getElementById('most-used').textContent = stats.most_used_app;\r\n            document.getElementById('avg-focus').textContent = stats.avg_focus_time + 's';\r\n        } catch (error) { console.error('Error loading stats:', error); }\r\n    }",APP.PY - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:08:08,</head>\r\n,index.html - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 20:10:20,</head>\r\n,APP.PY - Hackaton - Visual Studio Code,Code.exe,18256
2025-10-04 21:16:14,"from flask import Flask, render_template, request, jsonify\r\nfrom flask_cors import CORS\r\nimport threading\r\nfrom Collector import collector_to_csv\r\nfrom Process_analyse import proc_analysis\r\nimport csv\r\nfrom datetime import datetime\r\nimport os\r\nfrom flask import send_from_directory\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\n\r\nPLOT_FOLDER = os.path.join(os.getcwd(), ""plots"")  # <-- poprawnie\r\nCSV_FILE_2 = ""data/data_html.csv""\r\nCSV_FILE = ""data/logs.csv""\r\nos.makedirs(""data"", exist_ok=True)\r\n\r\n# ---------- Wątek monitorujący procesy w tle (ten z ProcessBot) ----------\r\ndef start_processbot():\r\n    collector_to_csv.main()  # uruchamiamy monitor w tle\r\n\r\nthreading.Thread(target=start_processbot, daemon=True).start()\r\n\r\n# ---------- Flask endpoints ----------\r\n@app.route(""/log"", methods=[""POST""])\r\ndef log_time():\r\n    data = request.json\r\n    if not data:\r\n        return {""status"": ""error"", ""message"": ""Brak danych""}, 400\r\n\r\n    domain = data.get(""domain"", ""unknown"")\r\n    seconds = data.get(""seconds"", 0)\r\n    eventType = data.get(""eventType"", ""unknown"")\r\n    ts = data.get(""ts"", datetime.now().isoformat())\r\n\r\n    with open(CSV_FILE_2, ""a"", newline="""", encoding=""utf-8"") as f:\r\n        writer = csv.writer(f)\r\n        writer.writerow([eventType, domain, seconds, ts])\r\n\r\n    return {""status"": ""ok""}\r\n\r\n@app.route('/')\r\ndef index():\r\n    # Lista plików w folderze plots\r\n    plots = sorted(os.listdir(PLOT_FOLDER))\r\n    return render_template('index.html', plots=plots)\r\n\r\n@app.route('/api/plots')\r\ndef api_plots():\r\n    if not os.path.exists(PLOT_FOLDER):\r\n        return jsonify([])\r\n    # Zwracamy tylko pliki PNG/JPG itp.\r\n    plots = [f for f in os.listdir(PLOT_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]\r\n    plots.sort()\r\n    return jsonify(plots)\r\n\r\n\r\n@app.route('/plots/<filename>')\r\ndef plot_file(filename):\r\n    return send_from_directory(PLOT_FOLDER, filename)\r\n\r\n# ---------- Uruchomienie Flask ----------\r\nif __name__ == ""__main__"":\r\n    app.run(debug=True, host=""127.0.0.1"", port=5000, use_reloader=False)",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 21:17:58,pid=11708,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 21:18:07,pid=11708,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 21:43:03,"<a href=""{{ url_for('index') }}"" class=""nav-button"">Dashboard</a>\r\n        <a href=""{{ url_for('analytics') }}"" class=""nav-button active"">Analytics</a>\r\n",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 21:43:24,"        <a href=""{{ url_for('index') }}"" class=""nav-button"">Dashboard</a>\r\n        <a href=""{{ url_for('analytics') }}"" class=""nav-button active"">Analytics</a>",index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:13:37,ności u,Dane - analiza – Opera,opera.exe,12704
2025-10-04 22:17:51,następny,Dane - analiza – Opera,opera.exe,12704
2025-10-04 22:58:54,    <!-- Sankey Diagram -->\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:30,            const width = document.getElementById('sankey-chart').clientWidth - margin.left - margin.right;\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:31,            const height = 600 - margin.top - margin.bottom;\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:31,"                .append(""svg"")\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:32,"                .attr(""height"", height + margin.top + margin.bottom)\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:33,"                .attr(""transform"", `translate(${margin.left},${margin.top})`);\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:34,\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:37,            const sankey = d3.sankey()\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:37,                .nodePadding(20)\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:38,\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:38,            });\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:39,\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:39,"                .selectAll(""path"")\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:41,"                .attr(""stroke-width"", d => Math.max(1, d.width))\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:41,"                    tooltip.style(""opacity"", 1)\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:42,"                .on(""mouseout"", () => tooltip.style(""opacity"", 0));\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:42,\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:44,"            const node = svg.append(""g"")\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:45,"                .attr(""width"", d => d.x1 - d.x0)\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:45,"                .attr(""dy"", ""0.35em"")\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:46,        } catch (error) {\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:47,"            console.error('Error creating Sankey diagram:', error);\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:47,"                '<div class=""loading"">Error loading data. Please check console.</div>';\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:48,        }\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:48,    }\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:52,            container.innerHTML = '';\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:52,            plots.forEach(plot => {\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:53,                const caption = document.createElement('p');\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:53,        setInterval(() => {\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:54,\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:59,        createSankeyDiagram();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 22:59:59,        setInterval(() => {\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:00:00,            createSankeyDiagram();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:00:00,"        }, 10000);\r\n",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:00:01,    });\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:00:01,</script>\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:07:23,</script>\r\n,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:08:14,"    fig = analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n    fig = analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n    fig = analyzer.plot_process_network(""plotly/siec_process.html"")",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:13:15,Bubble,DETAILS_uczmnie_ProcessBot.pdf – Opera,opera.exe,12704
2025-10-04 23:16:42,"@app.route('/plotly/<path:filename>')\r\ndef serve_plotly(filename):\r\n    return send_from_directory('plotly', filename)",● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:17:06,"<script>\r\n    function loadCharts() {\r\n        // Dodaj timestamp do URL aby wymusić odświeżenie cache\r\n        const timestamp = new Date().getTime();\r\n        \r\n        // Zakładając, że pliki nazywają się czas_procesy.html i siec_process.html\r\n        document.getElementById('time-iframe').src = `/plotly/czas_procesy.html?t=${timestamp}`;\r\n        document.getElementById('network-iframe').src = `/plotly/siec_process.html?t=${timestamp}`;\r\n    }\r\n\r\n    // Załaduj wykresy na starcie\r\n    loadCharts();\r\n\r\n    // Odświeżaj wykresy co 10 sekund\r\n    setInterval(loadCharts, 10000);\r\n</script>",● APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:18:38,"<script>\r\n    function loadCharts() {\r\n        // Dodaj timestamp do URL aby wymusić odświeżenie cache\r\n        const timestamp = new Date().getTime();\r\n        \r\n        // Zakładając, że pliki nazywają się czas_procesy.html i siec_process.html\r\n        document.getElementById('time-iframe').src = `/plotly/czas_procesy.html?t=${timestamp}`;\r\n        document.getElementById('network-iframe').src = `/plotly/siec_process.html?t=${timestamp}`;\r\n    }\r\n\r\n    // Załaduj wykresy na starcie\r\n    loadCharts();\r\n\r\n    // Odświeżaj wykresy co 10 sekund\r\n    setInterval(loadCharts, 10000);\r\n</script>",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:20:16,            const timestamp = new Date().getTime();\r\n,● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:20:38,"<div class=""chart-container"">\r\n    <div class=""chart-title"">Time Spent in Applications</div>\r\n    <div id=""time-spent-chart"" class=""chart-wrapper"">\r\n        <iframe id=""time-iframe"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div class=""chart-container"">\r\n    <div class=""chart-title"">Application Transition Network</div>\r\n    <div id=""network-chart"" class=""chart-wrapper"">\r\n        <iframe id=""network-iframe"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\r\n    </div>\r\n</div>",analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:21:17,"    <div class=""chart-container"">\r\n        <div class=""chart-title"">Application Transition Network</div>\r\n        <div id=""network-chart"" class=""chart-wrapper"">\r\n            <iframe id=""network-iframe"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\r\n        </div>\r\n    </div>",analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:22:13,            document.getElementById('network-iframe').src = `/plotly/siec_process.html`;,● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:28:18,"    analyzer = ProcessAnalyzer(""data/corporate_workflow_data.csv"")\r\n    print(analyzer.calculate_time_spent())\r\n\r\n    fig = analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n    fig = analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n    fig = analyzer.plot_process_network(""plotly/siec_process.html"")",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:32:16,"def generate_plots():\r\n    """"""Funkcja generująca wykresy w tle co 10 sekund""""""\r\n    while True:\r\n        try:\r\n            analyzer = ProcessAnalyzer(""data/corporate_workflow_data.csv"")\r\n            analyzer.calculate_time_spent()\r\n\r\n            analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n            analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n            analyzer.plot_process_network(""plotly/siec_process.html"")\r\n            \r\n            time.sleep(10)  # czekaj 10 sekund przed następną aktualizacją\r\n        except Exception as e:\r\n            print(f""Błąd podczas generowania wykresów: {e}"")\r\n            time.sleep(10)  # w przypadku błędu również czekaj 10s\r\n",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:33:53,windows,proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:43:57,proc_analysis,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:47:21,SLEEP_INTERVAL,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:50:17,SLEEP_INTERVAL,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:52:54,.chart-description {\r\n    color: #666;\r\n    font-size: 0.9em;\r\n    margin: 0.5em 0 1.5em 0;\r\n    line-height: 1.4;\r\n    max-width: 800px;\r\n}\r\n\r\n.chart-title {\r\n    font-size: 1.4em;\r\n    font-weight: 500;\r\n    margin-bottom: 0.5em;\r\n    color: #333;\r\n},analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:53:45,"<div class=""container"">\n    <div class=""header"">\n        <h1>📊 Advanced Analytics</h1>\n        <p>Deep Insights into Your Work Patterns & Application Usage</p>\n    </div>\n\n    <!-- ...existing navigation... -->\n\n    <div class=""chart-container"">\n        <div class=""chart-title"">Time Distribution Across Applications</div>\n        <p class=""chart-description"">Analysis of time spent in different applications, helping identify your most used tools and potential productivity optimization opportunities.</p>\n        <div id=""time-spent-chart"" class=""chart-wrapper"">\n            <iframe id=""time-iframe"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\n        </div>\n    </div>\n\n    <div class=""chart-container"">\n        <div class=""chart-title"">Window Switching Patterns</div>\n        <p class=""chart-description"">Interactive network visualization showing how you navigate between different windows. Larger nodes indicate more frequently accessed windows, while connections show common transitions.</p>\n        <div id=""network-chart"" class=""chart-wrapper"">\n            <iframe id=""network-iframe1"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\n        </div>\n    </div>\n\n    <div class=""chart-container"">\n        <div class=""chart-title"">Application Flow Network</div>\n        <p class=""chart-description"">Visual representation of your workflow between applications. Reveals common application switching patterns and helps identify your core application clusters.</p>\n        <div id=""network-chart"" class=""chart-wrapper"">\n            <iframe id=""network-iframe2"" width=""100%"" height=""600px"" frameborder=""0""></iframe>\n        </div>\n    </div>",analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:54:26,"<p class=""chart-description"">Analysis of time spent in different applications, helping identify your most used tools and potential productivity optimization opportunities.</p>",● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:54:50,"        <p class=""chart-description"">Interactive network visualization showing how you navigate between different windows. Larger nodes indicate more frequently accessed windows, while connections show common transitions.</p>",analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:55:15,Window Switching Patterns,● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:55:24,Time Distribution Across Applications,● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:55:33,Application Flow Network,● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:55:46,"<p class=""chart-description"">Visual representation of your workflow between applications. Reveals common application switching patterns and helps identify your core application clusters.</p>",● analytics.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:56:32,.chart-description {\r\n    color: #666;\r\n    font-size: 0.9em;\r\n    margin: 0.5em 0 1.5em 0;\r\n    line-height: 1.4;\r\n    max-width: 800px;\r\n}\r\n\r\n.chart-title {\r\n    font-size: 1.4em;\r\n    font-weight: 500;\r\n    margin-bottom: 0.5em;\r\n    color: #333;\r\n},● style.css - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:57:29,.chart-description {\r\n    color: #666;\r\n    font-size: 0.9em;\r\n    margin: 0.5em 0 1.5em 0;\r\n    line-height: 1.4;\r\n    max-width: 800px;\r\n}\r\n\r\n.chart-title {\r\n    \r\n    font-size: 1.4em;\r\n    font-weight: 500;\r\n    margin-bottom: 0.5em;\r\n    color: #333;\r\n},● style.css - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-04 23:58:09,".chart-description {\r\n    color: #5a6783;\r\n    font-size: 1em;\r\n    margin: 1em auto 2em auto;\r\n    line-height: 1.6;\r\n    max-width: 800px;\r\n    text-align: center;\r\n    padding: 0 20px;\r\n    letter-spacing: 0.3px;\r\n    font-weight: 400;\r\n    opacity: 0.9;\r\n    transition: opacity 0.3s ease;\r\n}\r\n\r\n.chart-description:hover {\r\n    opacity: 1;\r\n}\r\n\r\n.chart-title {\r\n    font-size: 1.6em;\r\n    font-weight: 600;\r\n    margin: 1em auto 0.8em auto;\r\n    color: #2c3e50;\r\n    text-align: center;\r\n    position: relative;\r\n    padding-bottom: 15px;\r\n}\r\n\r\n.chart-title:after {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 60px;\r\n    height: 3px;\r\n    background: linear-gradient(90deg, #667eea, #764ba2);\r\n    border-radius: 2px;\r\n}",● style.css - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 00:02:18,        createSankeyDiagram();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 00:02:20,            createSankeyDiagram();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 00:03:54,        loadStats();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 00:03:56,            loadStats();\r\n,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 00:13:41,            loadStats();\r\n,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:00:58,Application Usage Heatmap,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:13:48,    # Zwracamy tylko pliki PNG/JPG itp.\r\n,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:16:18,</div>,index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:16:21,"<div style=""display: flex; justify-content: center;"">",index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:16:38,</div>,● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:17:14,"<div style=""display: flex; justify-content: center;"">",● index.html - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:18:32,"import pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom datetime import timedelta\r\nimport networkx as nx\r\nimport time\r\n\r\nclass ProcessAnalyzer:\r\n    def __init__(self, csv_path: str):\r\n        """"""Inicjalizacja: wczytanie danych z CSV.""""""\r\n        self.data = pd.read_csv(csv_path)\r\n        self.data['timestamp'] = pd.to_datetime(self.data['timestamp'])\r\n        self.data.sort_values(by='timestamp', inplace=True)\r\n    \r\n    def calculate_time_spent(self, column: str = 'process') -> pd.DataFrame:\r\n        """"""Liczy czas spędzony w każdym procesie na podstawie różnicy czasów.""""""\r\n        df = self.data.copy()\r\n        df['next_timestamp'] = df['timestamp'].shift(-1)\r\n        df['duration'] = (df['next_timestamp'] - df['timestamp']).fillna(pd.Timedelta(seconds=0))\r\n        \r\n        # Grupowanie po procesach\r\n        time_spent = df.groupby(column)['duration'].sum().reset_index()\r\n        time_spent['minutes'] = time_spent['duration'].dt.total_seconds() / 60\r\n        \r\n        self.time_spent = time_spent\r\n        return time_spent\r\n    \r\n    def plot_time_spent(self, output_html: str = None):\r\n        """"""Tworzy interaktywny wykres Plotly i opcjonalnie zapisuje jako HTML.""""""\r\n        if not hasattr(self, 'time_spent'):\r\n            self.calculate_time_spent()\r\n        \r\n        # Sortowanie według czasu (minuty) malejąco\r\n        sorted_df = self.time_spent.sort_values(by='minutes', ascending=False)\r\n\r\n        fig = px.bar(\r\n            sorted_df,\r\n            x='process',\r\n            y='minutes',\r\n            color='process',\r\n            title='Czas spędzony w poszczególnych procesach (minuty)',\r\n            text_auto='.2f'\r\n        )\r\n        fig.update_layout(\r\n            xaxis_title='Proces',\r\n            yaxis_title='Czas [minuty]',\r\n            showlegend=False,\r\n            template='plotly_dark',\r\n            hovermode='x unified'\r\n        )\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres zapisano do pliku: {output_html}"")\r\n        return fig\r\n    \r\n    def plot_process_network(self, output_html: str = None, column: str = 'process'):\r\n        """"""Tworzy interaktywny wykres sieci przejść między procesami.""""""\r\n        df = self.data.copy()\r\n        df['next_process'] = df[column].shift(-1)\r\n        \r\n        # usuwamy powtarzające się procesy z rzędu (brak ""przejścia"")\r\n        df = df[df[column] != df['next_process']]\r\n        \r\n        # liczba przejść między procesami\r\n        transitions = df.groupby([column, 'next_process']).size().reset_index(name='count')\r\n        \r\n        # budowa grafu NetworkX\r\n        G = nx.DiGraph()\r\n        for _, row in transitions.iterrows():\r\n            G.add_edge(row[column], row['next_process'], weight=row['count'])\r\n        \r\n        pos = nx.spring_layout(G, seed=42)  # rozmieszczenie węzłów\r\n        \r\n        # przygotowanie danych do Plotly\r\n        edge_x, edge_y = [], []\r\n        for edge in G.edges():\r\n            x0, y0 = pos[edge[0]]\r\n            x1, y1 = pos[edge[1]]\r\n            edge_x.extend([x0, x1, None])\r\n            edge_y.extend([y0, y1, None])\r\n        \r\n        edge_trace = go.Scatter(\r\n            x=edge_x, y=edge_y,\r\n            line=dict(width=1, color='#888'),\r\n            hoverinfo='none',\r\n            mode='lines'\r\n        )\r\n        \r\n        node_x, node_y, node_text, degrees = [], [], [], []\r\n        max_degree = max(dict(G.degree()).values())\r\n        for node in G.nodes():\r\n            x, y = pos[node]\r\n            node_x.append(x)\r\n            node_y.append(y)\r\n            node_text.append(node)\r\n            degree = G.degree(node)\r\n            degrees.append(degree)\r\n        \r\n        node_trace = go.Scatter(\r\n            x=node_x, y=node_y,\r\n            mode='markers+text',\r\n            text=node_text,\r\n            textposition='top center',\r\n            hoverinfo='text',\r\n            marker=dict(\r\n                showscale=True,\r\n                colorscale='YlGnBu',\r\n                color=degrees,\r\n                size=degrees,\r\n                sizemode='diameter',  # tryb skalowania\r\n                sizemin=1,  # minimalny rozmiar węzła\r\n                colorbar=dict(\r\n                    title='Stopień węzła',\r\n                    thickness=15,\r\n                    xanchor='left'  \r\n                ),\r\n                line_width=2\r\n            )\r\n        )\r\n        \r\n        fig = go.Figure(data=[edge_trace, node_trace],\r\n                        layout=go.Layout(\r\n                            title='Sieć przejść między procesami' if column == 'process' else 'Sieć przejść między podprocesami',\r\n                            title_x=0.5,\r\n                            showlegend=False,\r\n                            hovermode='closest',\r\n                            margin=dict(b=0, l=0, r=0, t=40),\r\n                            template='plotly_dark',\r\n                            autosize=True \r\n                        ))\r\n        \r\n        if output_html:\r\n            fig.write_html(output_html)\r\n            print(f""Wykres sieci zapisano do pliku: {output_html}"")\r\n        return fig\r\n\r\ndef generate_plots():\r\n    """"""Funkcja generująca wykresy w tle co 10 sekund""""""\r\n    SLEEP_INTERVAL = 300  # sekund\r\n    while True:\r\n        try:\r\n            analyzer = ProcessAnalyzer(""data/windows.csv"")\r\n            analyzer.calculate_time_spent()\r\n\r\n            analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n            analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n            analyzer.plot_process_network(""plotly/siec_process.html"")\r\n            \r\n            time.sleep(SLEEP_INTERVAL)  # czekaj 10 sekund przed następną aktualizacją\r\n        except Exception as e:\r\n            print(f""Błąd podczas generowania wykresów: {e}"")\r\n            time.sleep(SLEEP_INTERVAL)  # w przypadku błędu również czekaj 10s\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    analyzer = ProcessAnalyzer(""data/windows.csv"")\r\n    print(analyzer.calculate_time_spent())\r\n\r\n    fig = analyzer.plot_time_spent(""plotly/czas_procesy.html"")\r\n    fig = analyzer.plot_process_network(""plotly/siec_titles.html"", 'title')\r\n    fig = analyzer.plot_process_network(""plotly/siec_process.html"")\r\n",proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:21:26,"hover_texts.append(f""<b>{node}</b><br>Stopień węzła: {degree}"")",Narzędzia do wykresów interaktywnych – Opera,opera.exe,12704
2025-10-05 01:22:01,hover_texts,● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:22:18,"hovertext=hover_texts,\r\n        hoverinfo='text',",● proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:22:51,"hovertext=hover_texts,\r\n        hoverinfo='text',",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:25:40,network of passages between windows,Tłumacz Google – Opera,opera.exe,12704
2025-10-05 01:26:20,network of passages between windows,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:29:47,network of passages between windows,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:30:21,plotly_white,proc_analysis.py - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:31:26,plotly_white,APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:34:59,"    plots = [f for f in os.listdir(PLOT_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]\r\n",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
2025-10-05 01:41:16,"    plots = [f for f in os.listdir(PLOT_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]\r\n",APP.PY - Hackaton - Visual Studio Code,Code.exe,11708
