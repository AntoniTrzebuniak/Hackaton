timestamp,content,window_title,process,pid
2025-10-04 14:32:41,"""""""\r\nProcessBot local demo data collector (consent-first, local-only)\r\nLogs:\r\n - Active window focus (title, process, pid, timestamp)\r\n - Clipboard contents (when changed) + active window at copy time\r\n - Copy / Paste events metadata (Ctrl/Cmd+C and Ctrl/Cmd+V): timestamp + active window + clipboard snapshot\r\n - Browser history sampling (Chrome and Firefox local history DB)\r\nData stored in separate CSV files\r\n\r\nIMPORTANT: This script does NOT record typed text (no keylogging).\r\nRun only on your own machine or with explicit consent.\r\n""""""\r\n\r\nimport threading\r\nimport time\r\nimport os\r\nimport sys\r\nimport platform\r\nfrom datetime import datetime, timedelta\r\nimport shutil\r\nimport tempfile\r\nimport sqlite3\r\nimport csv\r\nimport keyboard\r\n\r\nimport psutil\r\nimport pyperclip\r\nimport pygetwindow as gw\r\n\r\n# ---------- Configuration ----------\r\nfrom pathlib import Path\r\nDATA_DIR = Path(""./data"")\r\nWINDOWS_CSV = DATA_DIR / ""windows.csv""\r\nCLIPBOARD_CSV = DATA_DIR / ""clipboard.csv""\r\nEVENTS_CSV = DATA_DIR / ""events.csv""\r\nBROWSER_HISTORY_CSV = DATA_DIR / ""browser_history.csv""\r\n\r\nACTIVE_WINDOW_POLL_INTERVAL = 1.0   # seconds\r\nCLIPBOARD_POLL_INTERVAL = 0.5       # seconds\r\nBROWSER_HISTORY_POLL_INTERVAL = 60  # seconds (sample every minute)\r\n# -----------------------------------\r\n\r\n# ---------- Helper utilities ----------\r\n\r\ndef now_iso():\r\n    return datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')\r\n\r\ndef ensure_csv_files():\r\n    """"""Initialize CSV files with headers if they don't exist""""""\r\n    if not os.path.exists(DATA_DIR):\r\n        os.makedirs(DATA_DIR)\r\n    \r\n    # Windows CSV\r\n    if not os.path.exists(WINDOWS_CSV):\r\n        with open(WINDOWS_CSV, 'w', newline='', encoding='utf-8') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(['timestamp', 'title', 'process', 'pid'])\r\n    \r\n    # Clipboard CSV\r\n    if not os.path.exists(CLIPBOARD_CSV):\r\n        with open(CLIPBOARD_CSV, 'w', newline='', encoding='utf-8') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(['timestamp', 'content', 'window_title', 'process', 'pid'])\r\n    \r\n    # Events CSV\r\n    if not os.path.exists(EVENTS_CSV):\r\n        with open(EVENTS_CSV, 'w', newline='', encoding='utf-8') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(['timestamp', 'event_type', 'window_title', 'process', 'pid', 'associated_clipboard_timestamp'])\r\n    \r\n    # Browser History CSV\r\n    if not os.path.exists(BROWSER_HISTORY_CSV):\r\n        with open(BROWSER_HISTORY_CSV, 'w', newline='', encoding='utf-8') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(['timestamp', 'browser', 'url', 'title', 'visit_count', 'last_visit_time'])\r\n\r\ndef append_to_csv(filepath, row):\r\n    """"""Thread-safe append to CSV file""""""\r\n    with csv_lock:\r\n        with open(filepath, 'a', newline='', encoding='utf-8') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(row)\r\n\r\ndef get_active_window_info():\r\n    """"""\r\n    Try to return (title, pid, process_name). Some platforms may not provide PID.\r\n    """"""\r\n    title = None\r\n    pid = None\r\n    process_name = None\r\n    try:\r\n        win = gw.getActiveWindow()\r\n        if win:\r\n            title = win.title\r\n    except Exception:\r\n        win = None\r\n\r\n    # Fallback strategies:\r\n    if title is None:\r\n        plat = platform.system()\r\n        if plat == ""Darwin"":\r\n            try:\r\n                sc = 'tell application ""System Events"" to get name of first process whose frontmost is true'\r\n                app_name = os.popen('osascript -e \'{}\''.format(sc)).read().strip()\r\n                title = app_name\r\n            except Exception:\r\n                title = ""Unknown""\r\n        else:\r\n            title = ""Unknown""\r\n\r\n    # Try to find a process by matching window title among running processes (best-effort)\r\n    try:\r\n        for p in psutil.process_iter(['pid', 'name', 'cmdline']):\r\n            try:\r\n                name = p.info.get('name') or ''\r\n                cmdline = ' '.join(p.info.get('cmdline') or [])\r\n                if title and (title.lower() in name.lower() or title.lower() in cmdline.lower()):\r\n                    pid = p.info['pid']\r\n                    process_name = name\r\n                    break\r\n            except Exception:\r\n                continue\r\n    except Exception:\r\n        pass\r\n\r\n    if process_name is None:\r\n        process_name = """"\r\n    return title, pid or 0, process_name\r\n\r\n# ---------- CSV helper with lock ----------\r\ncsv_lock = threading.Lock()\r\n\r\ndef log_window_snapshot(title, pid, process):\r\n    timestamp = now_iso()\r\n    append_to_csv(WINDOWS_CSV, [timestamp, title, process, pid])\r\n\r\ndef log_clipboard(content, title, pid, process):\r\n    timestamp = now_iso()\r\n    # Escape newlines and quotes in content for CSV\r\n    content_escaped = content.replace('\n', '\\n').replace('\r', '\\r')\r\n    append_to_csv(CLIPBOARD_CSV, [timestamp, content_escaped, title, process, pid])\r\n    return timestamp  # Return timestamp as ID\r\n\r\ndef log_event(event_type, title, pid, process, clipboard_timestamp=None):\r\n    timestamp = now_iso()\r\n    append_to_csv(EVENTS_CSV, [timestamp, event_type, title, process, pid, clipboard_timestamp or ''])\r\n    return timestamp\r\n\r\ndef log_browser_row(browser, url, title_text, visit_count, last_visit_time):\r\n    timestamp = now_iso()\r\n    append_to_csv(BROWSER_HISTORY_CSV, [timestamp, browser, url, title_text, visit_count, last_visit_time])\r\n\r\n# ---------- Active window monitor ----------\r\ndef active_window_monitor(stop_event):\r\n    last_title = None\r\n    while not stop_event.is_set():\r\n        title, pid, process = get_active_window_info()\r\n        if title != last_title:\r\n            print(f""[WINDOW] {now_iso()} - {title} ({process} pid={pid})"")\r\n            log_window_snapshot(title, pid, process)\r\n            last_title = title\r\n        time.sleep(ACTIVE_WINDOW_POLL_INTERVAL)\r\n\r\n# ---------- Clipboard monitor ----------\r\n# Global to track clipboard and prevent double-logging from keyboard events\r\nlast_clipboard_content = None\r\nclipboard_lock = threading.Lock()\r\n\r\ndef clipboard_monitor(stop_event):\r\n    global last_clipboard_content\r\n    while not stop_event.is_set():\r\n        try:\r\n            clip = pyperclip.paste()\r\n        except Exception:\r\n            clip = None\r\n        if clip and clip != last_clipboard_content:\r\n            with clipboard_lock:\r\n                if clip != last_clipboard_content:\r\n                    title, pid, process = get_active_window_info()\r\n                    clip_timestamp = log_clipboard(clip, title, pid, process)\r\n                    print(f""[CLIP] {now_iso()} - clipboard changed (len={len(clip)}) in window '{title}'"")\r\n                    last_clipboard_content = clip\r\n        time.sleep(CLIPBOARD_POLL_INTERVAL)\r\n\r\n# ---------- Keyboard listener for copy/paste events ----------\r\ndef keyboard_listener_thread(stop_event):\r\n    \r\n    def on_copy():\r\n        global last_clipboard_content\r\n        title, pid, process = get_active_window_info()\r\n        print(""[EVENT] Copy detected!"")\r\n        \r\n        # Get clipboard content \r\n        try:\r\n            clip = pyperclip.paste()\r\n            clip_timestamp = None\r\n            if clip:\r\n                with clipboard_lock:\r\n                    if clip != last_clipboard_content:\r\n                        clip_timestamp = log_clipboard(clip, title, pid, process)\r\n                        last_clipboard_content = clip\r\n                    else:\r\n                        clip_timestamp = now_iso()\r\n            \r\n            event_timestamp = log_event('copy', title, pid, process, clipboard_timestamp=clip_timestamp)\r\n            print(f""[EVENT] Copy event logged at {event_timestamp}"")\r\n        except Exception as e:\r\n            print(f""[ERROR] Copy event error: {e}"")\r\n\r\n    def on_paste():\r\n        title, pid, process = get_active_window_info()\r\n        print(""[EVENT] Paste detected!"")\r\n        \r\n        try:\r\n            clip = pyperclip.paste()\r\n            clip_timestamp = now_iso() if clip else None\r\n            event_timestamp = log_event('paste', title, pid, process, clipboard_timestamp=clip_timestamp)\r\n            print(f""[EVENT] Paste event logged at {event_timestamp}"")\r\n        except Exception as e:\r\n            print(f""[ERROR] Paste event error: {e}"")\r\n\r\n    # Register hotkeys\r\n    keyboard.add_hotkey(""ctrl+c"", on_copy, suppress=False)\r\n    keyboard.add_hotkey(""ctrl+v"", on_paste, suppress=False)\r\n    \r\n    # Keep thread running until stop event\r\n    while not stop_event.is_set():\r\n        time.sleep(0.1)\r\n    \r\n    # Clean up\r\n    keyboard.unhook_all()\r\n\r\n# ---------- Browser history reader (Chrome, Firefox local) ----------\r\ndef read_chrome_history():\r\n    home = os.path.expanduser(""~"")\r\n    plat = platform.system()\r\n    candidates = []\r\n    \r\n    if plat == ""Windows"":\r\n        local = os.getenv('LOCALAPPDATA') or os.path.join(home, 'AppData', 'Local')\r\n        candidates.append(os.path.join(local, ""Google"", ""Chrome"", ""User Data"", ""Default"", ""History""))\r\n        candidates.append(os.path.join(local, ""Chromium"", ""User Data"", ""Default"", ""History""))\r\n    elif plat == ""Darwin"":\r\n        candidates.append(os.path.join(home, ""Library"", ""Application Support"", ""Google"", ""Chrome"", ""Default"", ""History""))\r\n        candidates.append(os.path.join(home, ""Library"", ""Application Support"", ""Chromium"", ""Default"", ""History""))\r\n    else:\r\n        candidates.append(os.path.join(home, "".config"", ""google-chrome"", ""Default"", ""History""))\r\n        candidates.append(os.path.join(home, "".config"", ""chromium"", ""Default"", ""History""))\r\n\r\n    for c in candidates:\r\n        if os.path.exists(c):\r\n            try:\r\n                tmp = tempfile.mktemp()\r\n                shutil.copy2(c, tmp)\r\n                db = sqlite3.connect(tmp)\r\n                cur = db.cursor()\r\n                cur.execute(""SELECT url, title, visit_count, last_visit_time FROM urls ORDER BY last_visit_time DESC LIMIT 50"")\r\n                rows = cur.fetchall()\r\n                for r in rows:\r\n                    url, title_text, visit_count, last_visit_time = r\r\n                    try:\r\n                        webkit_epoch = datetime(1601, 1, 1)\r\n                        last_visit_dt = webkit_epoch + timedelta(microseconds=int(last_visit_time))\r\n                        last_visit_iso = last_visit_dt.isoformat() + ""Z""\r\n                    except Exception:\r\n                        last_visit_iso = """"\r\n                    log_browser_row(""chrome"", url, title_text or '', visit_count, last_visit_iso)\r\n                db.close()\r\n                os.remove(tmp)\r\n                print(f""[BROWSER] Chrome history sampled ({len(rows)} rows)"")\r\n                return\r\n            except Exception as e:\r\n                print(""[BROWSER] Chrome read error:"", e)\r\n    print(""[BROWSER] No Chrome history found or could not read it."")\r\n\r\ndef read_firefox_history():\r\n    home = os.path.expanduser(""~"")\r\n    plat = platform.system()\r\n    \r\n    if plat == ""Windows"":\r\n        local = os.getenv('APPDATA') or os.path.join(home, 'AppData', 'Roaming')\r\n        profile_root = os.path.join(local, ""Mozilla"", ""Firefox"", ""Profiles"")\r\n    elif plat == ""Darwin"":\r\n        profile_root = os.path.join(home, ""Library"", ""Application Support"", ""Firefox"", ""Profiles"")\r\n    else:\r\n        profile_root = os.path.join(home, "".mozilla"", ""firefox"")\r\n        \r\n    if os.path.isdir(profile_root):\r\n        for fname in os.listdir(profile_root):\r\n            p = os.path.join(profile_root, fname, ""places.sqlite"")\r\n            if os.path.exists(p):\r\n                try:\r\n                    tmp = tempfile.mktemp()\r\n                    shutil.copy2(p, tmp)\r\n                    db = sqlite3.connect(tmp)\r\n                    cur = db.cursor()\r\n                    cur.execute(""SELECT url, title, visit_count, last_visit_date FROM moz_places ORDER BY last_visit_date DESC LIMIT 50"")\r\n                    rows = cur.fetchall()\r\n                    for r in rows:\r\n                        url, title_text, visit_count, last_visit_date = r\r\n                        try:\r\n                            if last_visit_date:\r\n                                last_visit_dt = datetime.fromtimestamp(last_visit_date / 1000000.0)\r\n                                last_visit_iso = last_visit_dt.isoformat() + ""Z""\r\n                            else:\r\n                                last_visit_iso = """"\r\n                        except Exception:\r\n                            last_visit_iso = """"\r\n                        log_browser_row(""firefox"", url, title_text or '', visit_count, last_visit_iso)\r\n                    db.close()\r\n                    os.remove(tmp)\r\n                    print(f""[BROWSER] Firefox history sampled ({len(rows)} rows)"")\r\n                    return\r\n                except Exception as e:\r\n                    print(""[BROWSER] Firefox read error:"", e)\r\n    print(""[BROWSER] No Firefox history found or could not read it."")\r\n\r\ndef browser_history_sampler(stop_event):\r\n    while not stop_event.is_set():\r\n        try:\r\n            read_chrome_history()\r\n            read_firefox_history()\r\n        except Exception as e:\r\n            print(""[BROWSER] sampler error:"", e)\r\n        for _ in range(int(BROWSER_HISTORY_POLL_INTERVAL)):\r\n            if stop_event.is_set():\r\n                break\r\n            time.sleep(1)\r\n\r\n# ---------- Main controller ----------\r\ndef main():\r\n    print(""ProcessBot Local Demo Collector (CSV version)"")\r\n    print(""This script collects active windows, clipboard contents, copy/paste events, and local browser history."")\r\n    print(f""Data will be stored in separate CSV files:"")\r\n    print(f""  - {WINDOWS_CSV}"")\r\n    print(f""  - {CLIPBOARD_CSV}"")\r\n    print(f""  - {EVENTS_CSV}"")\r\n    print(f""  - {BROWSER_HISTORY_CSV}"")\r\n    \r\n    ensure_csv_files()\r\n    \r\n    stop_event = threading.Event()\r\n    threads = []\r\n\r\n    t_window = threading.Thread(target=active_window_monitor, args=(stop_event,), daemon=True)\r\n    threads.append(t_window)\r\n    t_clip = threading.Thread(target=clipboard_monitor, args=(stop_event,), daemon=True)\r\n    threads.append(t_clip)\r\n    t_kb = threading.Thread(target=keyboard_listener_thread, args=(stop_event,), daemon=True)\r\n    threads.append(t_kb)\r\n    t_browser = threading.Thread(target=browser_history_sampler, args=(stop_event,), daemon=True)\r\n    threads.append(t_browser)\r\n\r\n    print(""\nStarting monitors... Press Ctrl+C here to stop."")\r\n    for t in threads:\r\n        t.start()\r\n\r\n    try:\r\n        while True:\r\n            time.sleep(1)\r\n    except KeyboardInterrupt:\r\n        print(""\nStopping monitors..."")\r\n        stop_event.set()\r\n        for t in threads:\r\n            t.join(timeout=2)\r\n        print(""Stopped. Data saved in CSV files."")\r\n        sys.exit(0)\r\n\r\nif __name__ == ""__main__"":\r\n    main()",collector_to_csv.py - HACKATON - Visual Studio Code,,0
2025-10-04 14:33:01,associated_clipboard_timestamp,events.csv - HACKATON - Visual Studio Code,,0
2025-10-04 14:35:46,browser_history_sampler,collector_to_csv.py - HACKATON - Visual Studio Code,,0
2025-10-04 14:53:13,"def log_browser_row(browser, url, title_text, visit_count, last_visit_time):\r\n    timestamp = now_iso()\r\n    append_to_csv(BROWSER_HISTORY_CSV, [timestamp, browser, url, title_text, visit_count, last_visit_time])\r\n",collector_to_csv.py - HACKATON - Visual Studio Code,,0
2025-10-04 15:00:06,"timestamp,title,process,pid\r\n2025-10-04 14:32:41,collector_to_csv.py - HACKATON - Visual Studio Code,,0\r\n2025-10-04 14:32:49,events.csv - HACKATON - Visual Studio Code,,0\r\n2025-10-04 14:33:17,windows.csv - HACKATON - Visual Studio Code,,0\r\n2025-10-04 14:33:20,Przełączanie zadań,,0\r\n2025-10-04 14:33:21,● dirs.py - meteopy - Visual Studio Code,,0\r\n2025-10-04 14:33:22,windows.csv - HACKATON - Visual Studio Code,,0\r\n2025-10-04 14:33:27,● dirs.py - meteopy - Visual Studio Code,,0\r\n2025-10-04 14:33:28,windows.csv - HACKATON - Visual Studio Code,,0\r\n2025-10-04 14:33:43,Przełączanie zadań,,0\r\n2025-10-04 14:33:44,,,0\r\n2025-10-04 14:33:45,windows.csv - HACKATON - Visual Studio Code,,0",windows.csv - HACKATON - Visual Studio Code,,0
2025-10-04 15:05:33,"<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n    <meta charset=""UTF-8"">\r\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n    <title>ProcessBot Dashboard</title>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js""></script>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3-sankey/0.12.3/d3-sankey.min.js""></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 1400px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            text-align: center;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .header h1 {\r\n            font-size: 3em;\r\n            margin-bottom: 10px;\r\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .header p {\r\n            font-size: 1.2em;\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-5px);\r\n        }\r\n\r\n        .stat-label {\r\n            font-size: 0.9em;\r\n            color: #666;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .stat-value {\r\n            font-size: 2.5em;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.8em;\r\n            color: #333;\r\n            margin-bottom: 20px;\r\n            text-align: center;\r\n        }\r\n\r\n        #sankey-chart {\r\n            width: 100%;\r\n            height: 600px;\r\n            overflow: visible;\r\n        }\r\n\r\n        .loading {\r\n            text-align: center;\r\n            padding: 40px;\r\n            color: #666;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .node rect {\r\n            fill-opacity: 0.9;\r\n            stroke: #000;\r\n            stroke-width: 1px;\r\n        }\r\n\r\n        .node text {\r\n            font-size: 12px;\r\n            fill: #333;\r\n            font-weight: 500;\r\n        }\r\n\r\n        .link {\r\n            fill: none;\r\n            stroke-opacity: 0.3;\r\n        }\r\n\r\n        .link:hover {\r\n            stroke-opacity: 0.6;\r\n        }\r\n\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=""container"">\r\n        <div class=""header"">\r\n            <h1>🤖 ProcessBot Dashboard</h1>\r\n            <p>AI-Powered Work Automation Analytics</p>\r\n        </div>\r\n\r\n        <div class=""stats-grid"" id=""stats-grid"">\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Total Window Switches</div>\r\n                <div class=""stat-value"" id=""total-switches"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Unique Applications</div>\r\n                <div class=""stat-value"" id=""unique-apps"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Most Used App</div>\r\n                <div class=""stat-value"" id=""most-used"" style=""font-size: 1.5em;"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Avg Focus Time</div>\r\n                <div class=""stat-value"" id=""avg-focus"">-</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=""chart-container"">\r\n            <div class=""chart-title"">Window Transition Flow</div>\r\n            <div id=""sankey-chart"">\r\n                <div class=""loading"">Loading data...</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=""tooltip"" id=""tooltip""></div>\r\n\r\n    <script>\r\n        // Load statistics\r\n        async function loadStats() {\r\n            try {\r\n                const response = await fetch('/api/stats');\r\n                const stats = await response.json();\r\n                \r\n                document.getElementById('total-switches').textContent = stats.total_switches;\r\n                document.getElementById('unique-apps').textContent = stats.unique_apps;\r\n                document.getElementById('most-used').textContent = stats.most_used_app;\r\n                document.getElementById('avg-focus').textContent = stats.avg_focus_time + 's';\r\n            } catch (error) {\r\n                console.error('Error loading stats:', error);\r\n            }\r\n        }\r\n\r\n        // Create Sankey diagram\r\n        async function createSankeyDiagram() {\r\n            try {\r\n                const response = await fetch('/api/window-transitions');\r\n                const data = await response.json();\r\n\r\n                if (!data.nodes || data.nodes.length === 0) {\r\n                    document.getElementById('sankey-chart').innerHTML = \r\n                        '<div class=""loading"">No data available yet. Start collecting data first.</div>';\r\n                    return;\r\n                }\r\n\r\n                // Clear loading message\r\n                document.getElementById('sankey-chart').innerHTML = '';\r\n\r\n                const margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n                const width = document.getElementById('sankey-chart').clientWidth - margin.left - margin.right;\r\n                const height = 600 - margin.top - margin.bottom;\r\n\r\n                // Create SVG\r\n                const svg = d3.select(""#sankey-chart"")\r\n                    .append(""svg"")\r\n                    .attr(""width"", width + margin.left + margin.right)\r\n                    .attr(""height"", height + margin.top + margin.bottom)\r\n                    .append(""g"")\r\n                    .attr(""transform"", `translate(${margin.left},${margin.top})`);\r\n\r\n                // Color scale\r\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n                // Create Sankey layout\r\n                const sankey = d3.sankey()\r\n                    .nodeWidth(20)\r\n                    .nodePadding(20)\r\n                    .extent([[1, 1], [width - 1, height - 5]]);\r\n\r\n                // Generate the Sankey diagram\r\n                const graph = sankey({\r\n                    nodes: data.nodes.map(d => Object.assign({}, d)),\r\n                    links: data.links.map(d => Object.assign({}, d))\r\n                });\r\n\r\n                // Tooltip\r\n                const tooltip = d3.select(""#tooltip"");\r\n\r\n                // Add links\r\n                const link = svg.append(""g"")\r\n                    .attr(""class"", ""links"")\r\n                    .selectAll(""path"")\r\n                    .data(graph.links)\r\n                    .enter().append(""path"")\r\n                    .attr(""class"", ""link"")\r\n                    .attr(""d"", d3.sankeyLinkHorizontal())\r\n                    .attr(""stroke"", d => color(d.source.name))\r\n                    .attr(""stroke-width"", d => Math.max(1, d.width))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`${d.source.name} → ${d.target.name}<br><strong>${d.value}</strong> switches`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add nodes\r\n                const node = svg.append(""g"")\r\n                    .attr(""class"", ""nodes"")\r\n                    .selectAll(""g"")\r\n                    .data(graph.nodes)\r\n                    .enter().append(""g"")\r\n                    .attr(""class"", ""node"");\r\n\r\n                node.append(""rect"")\r\n                    .attr(""x"", d => d.x0)\r\n                    .attr(""y"", d => d.y0)\r\n                    .attr(""height"", d => d.y1 - d.y0)\r\n                    .attr(""width"", d => d.x1 - d.x0)\r\n                    .attr(""fill"", d => color(d.name))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`<strong>${d.name}</strong><br>${d.value} transitions`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add node labels\r\n                node.append(""text"")\r\n                    .attr(""x"", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)\r\n                    .attr(""y"", d => (d.y1 + d.y0) / 2)\r\n                    .attr(""dy"", ""0.35em"")\r\n                    .attr(""text-anchor"", d => d.x0 < width / 2 ? ""start"" : ""end"")\r\n                    .text(d => d.name);\r\n\r\n            } catch (error) {\r\n                console.error('Error creating Sankey diagram:', error);\r\n                document.getElementById('sankey-chart').innerHTML = \r\n                    '<div class=""loading"">Error loading data. Please check console.</div>';\r\n            }\r\n        }\r\n\r\n        // Initialize dashboard\r\n        window.addEventListener('DOMContentLoaded', () => {\r\n            loadStats();\r\n            createSankeyDiagram();\r\n            \r\n            // Refresh every 10 seconds\r\n            setInterval(() => {\r\n                loadStats();\r\n                createSankeyDiagram();\r\n            }, 10000);\r\n        });\r\n    </script>\r\n</body>\r\n</html>",JSON data file management - Claude – Opera,,0
2025-10-04 15:07:47,"<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n    <meta charset=""UTF-8"">\r\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n    <title>ProcessBot Dashboard</title>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js""></script>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3-sankey/0.12.3/d3-sankey.min.js""></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 1400px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            text-align: center;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .header h1 {\r\n            font-size: 3em;\r\n            margin-bottom: 10px;\r\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .header p {\r\n            font-size: 1.2em;\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-5px);\r\n        }\r\n\r\n        .stat-label {\r\n            font-size: 0.9em;\r\n            color: #666;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .stat-value {\r\n            font-size: 2.5em;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.8em;\r\n            color: #333;\r\n            margin-bottom: 20px;\r\n            text-align: center;\r\n        }\r\n\r\n        #sankey-chart {\r\n            width: 100%;\r\n            height: 600px;\r\n            overflow: visible;\r\n        }\r\n\r\n        .loading {\r\n            text-align: center;\r\n            padding: 40px;\r\n            color: #666;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .node rect {\r\n            fill-opacity: 0.9;\r\n            stroke: #000;\r\n            stroke-width: 1px;\r\n        }\r\n\r\n        .node text {\r\n            font-size: 12px;\r\n            fill: #333;\r\n            font-weight: 500;\r\n        }\r\n\r\n        .link {\r\n            fill: none;\r\n            stroke-opacity: 0.3;\r\n        }\r\n\r\n        .link:hover {\r\n            stroke-opacity: 0.6;\r\n        }\r\n\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=""container"">\r\n        <div class=""header"">\r\n            <h1>🤖 ProcessBot Dashboard</h1>\r\n            <p>AI-Powered Work Automation Analytics</p>\r\n        </div>\r\n\r\n        <div class=""stats-grid"" id=""stats-grid"">\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Total Window Switches</div>\r\n                <div class=""stat-value"" id=""total-switches"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Unique Applications</div>\r\n                <div class=""stat-value"" id=""unique-apps"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Most Used App</div>\r\n                <div class=""stat-value"" id=""most-used"" style=""font-size: 1.5em;"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Avg Focus Time</div>\r\n                <div class=""stat-value"" id=""avg-focus"">-</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=""chart-container"">\r\n            <div class=""chart-title"">Window Transition Flow</div>\r\n            <div id=""sankey-chart"">\r\n                <div class=""loading"">Loading data...</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=""tooltip"" id=""tooltip""></div>\r\n\r\n    <script>\r\n        // Load statistics\r\n        async function loadStats() {\r\n            try {\r\n                const response = await fetch('/api/stats');\r\n                const stats = await response.json();\r\n                \r\n                document.getElementById('total-switches').textContent = stats.total_switches;\r\n                document.getElementById('unique-apps').textContent = stats.unique_apps;\r\n                document.getElementById('most-used').textContent = stats.most_used_app;\r\n                document.getElementById('avg-focus').textContent = stats.avg_focus_time + 's';\r\n            } catch (error) {\r\n                console.error('Error loading stats:', error);\r\n            }\r\n        }\r\n\r\n        // Create Sankey diagram\r\n        async function createSankeyDiagram() {\r\n            try {\r\n                const response = await fetch('/api/window-transitions');\r\n                const data = await response.json();\r\n\r\n                if (!data.nodes || data.nodes.length === 0) {\r\n                    document.getElementById('sankey-chart').innerHTML = \r\n                        '<div class=""loading"">No data available yet. Start collecting data first.</div>';\r\n                    return;\r\n                }\r\n\r\n                // Clear loading message\r\n                document.getElementById('sankey-chart').innerHTML = '';\r\n\r\n                const margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n                const width = document.getElementById('sankey-chart').clientWidth - margin.left - margin.right;\r\n                const height = 600 - margin.top - margin.bottom;\r\n\r\n                // Create SVG\r\n                const svg = d3.select(""#sankey-chart"")\r\n                    .append(""svg"")\r\n                    .attr(""width"", width + margin.left + margin.right)\r\n                    .attr(""height"", height + margin.top + margin.bottom)\r\n                    .append(""g"")\r\n                    .attr(""transform"", `translate(${margin.left},${margin.top})`);\r\n\r\n                // Color scale\r\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n                // Create Sankey layout\r\n                const sankey = d3.sankey()\r\n                    .nodeWidth(20)\r\n                    .nodePadding(20)\r\n                    .extent([[1, 1], [width - 1, height - 5]]);\r\n\r\n                // Generate the Sankey diagram\r\n                const graph = sankey({\r\n                    nodes: data.nodes.map(d => Object.assign({}, d)),\r\n                    links: data.links.map(d => Object.assign({}, d))\r\n                });\r\n\r\n                // Tooltip\r\n                const tooltip = d3.select(""#tooltip"");\r\n\r\n                // Add links\r\n                const link = svg.append(""g"")\r\n                    .attr(""class"", ""links"")\r\n                    .selectAll(""path"")\r\n                    .data(graph.links)\r\n                    .enter().append(""path"")\r\n                    .attr(""class"", ""link"")\r\n                    .attr(""d"", d3.sankeyLinkHorizontal())\r\n                    .attr(""stroke"", d => color(d.source.name))\r\n                    .attr(""stroke-width"", d => Math.max(1, d.width))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`${d.source.name} → ${d.target.name}<br><strong>${d.value}</strong> switches`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add nodes\r\n                const node = svg.append(""g"")\r\n                    .attr(""class"", ""nodes"")\r\n                    .selectAll(""g"")\r\n                    .data(graph.nodes)\r\n                    .enter().append(""g"")\r\n                    .attr(""class"", ""node"");\r\n\r\n                node.append(""rect"")\r\n                    .attr(""x"", d => d.x0)\r\n                    .attr(""y"", d => d.y0)\r\n                    .attr(""height"", d => d.y1 - d.y0)\r\n                    .attr(""width"", d => d.x1 - d.x0)\r\n                    .attr(""fill"", d => color(d.name))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`<strong>${d.name}</strong><br>${d.value} transitions`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add node labels\r\n                node.append(""text"")\r\n                    .attr(""x"", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)\r\n                    .attr(""y"", d => (d.y1 + d.y0) / 2)\r\n                    .attr(""dy"", ""0.35em"")\r\n                    .attr(""text-anchor"", d => d.x0 < width / 2 ? ""start"" : ""end"")\r\n                    .text(d => d.name);\r\n\r\n            } catch (error) {\r\n                console.error('Error creating Sankey diagram:', error);\r\n                document.getElementById('sankey-chart').innerHTML = \r\n                    '<div class=""loading"">Error loading data. Please check console.</div>';\r\n            }\r\n        }\r\n\r\n        // Initialize dashboard\r\n        window.addEventListener('DOMContentLoaded', () => {\r\n            loadStats();\r\n            createSankeyDiagram();\r\n            \r\n            // Refresh every 10 seconds\r\n            setInterval(() => {\r\n                loadStats();\r\n                createSankeyDiagram();\r\n            }, 10000);\r\n        });\r\n    </script>\r\n</body>\r\n</html>",collector_to_csv.py - Hackaton - Visual Studio Code,,0
2025-10-04 15:08:09,"""""""\r\nProcessBot Dashboard - Flask Web Application\r\nVisualizes user activity data and suggests automation opportunities\r\n""""""\r\n\r\nfrom flask import Flask, render_template, jsonify\r\nimport pandas as pd\r\nfrom pathlib import Path\r\nfrom collections import Counter, defaultdict\r\nimport json\r\n\r\napp = Flask(__name__)\r\n\r\n# Configuration\r\nDATA_DIR = Path(""./data"")\r\nWINDOWS_CSV = DATA_DIR / ""windows.csv""\r\nCLIPBOARD_CSV = DATA_DIR / ""clipboard.csv""\r\nEVENTS_CSV = DATA_DIR / ""events.csv""\r\nBROWSER_HISTORY_CSV = DATA_DIR / ""browser_history.csv""\r\n\r\ndef load_windows_data():\r\n    """"""Load windows activity data""""""\r\n    try:\r\n        df = pd.read_csv(WINDOWS_CSV)\r\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\r\n        return df\r\n    except Exception as e:\r\n        print(f""Error loading windows data: {e}"")\r\n        return pd.DataFrame()\r\n\r\ndef calculate_window_transitions():\r\n    """"""Calculate transitions between windows for Sankey diagram""""""\r\n    df = load_windows_data()\r\n    \r\n    if df.empty:\r\n        return {""nodes"": [], ""links"": []}\r\n    \r\n    # Clean up window titles - simplify them\r\n    df['simple_title'] = df['title'].apply(lambda x: simplify_window_title(str(x)))\r\n    \r\n    # Remove consecutive duplicates (same window)\r\n    df = df[df['simple_title'] != df['simple_title'].shift()]\r\n    \r\n    # Create transitions\r\n    transitions = []\r\n    for i in range(len(df) - 1):\r\n        source = df.iloc[i]['simple_title']\r\n        target = df.iloc[i + 1]['simple_title']\r\n        if source != target:  # Only count actual switches\r\n            transitions.append((source, target))\r\n    \r\n    # Count transitions\r\n    transition_counts = Counter(transitions)\r\n    \r\n    # Get top transitions (limit to avoid clutter)\r\n    top_transitions = transition_counts.most_common(20)\r\n    \r\n    # Build nodes and links for Sankey\r\n    unique_windows = set()\r\n    for (source, target), count in top_transitions:\r\n        unique_windows.add(source)\r\n        unique_windows.add(target)\r\n    \r\n    # Create node list with IDs\r\n    nodes = [{""id"": i, ""name"": name} for i, name in enumerate(sorted(unique_windows))]\r\n    node_map = {node[""name""]: node[""id""] for node in nodes}\r\n    \r\n    # Create links\r\n    links = []\r\n    for (source, target), count in top_transitions:\r\n        links.append({\r\n            ""source"": node_map[source],\r\n            ""target"": node_map[target],\r\n            ""value"": count\r\n        })\r\n    \r\n    return {""nodes"": nodes, ""links"": links}\r\n\r\ndef simplify_window_title(title):\r\n    """"""Simplify window titles to make them more readable""""""\r\n    if pd.isna(title) or title == '' or title == '0':\r\n        return ""Unknown""\r\n    \r\n    # Extract application name from common patterns\r\n    if "" - "" in title:\r\n        parts = title.split("" - "")\r\n        # Usually app name is at the end\r\n        app = parts[-1].strip()\r\n        # But if it's too long, take first part\r\n        if len(app) > 30:\r\n            app = parts[0].strip()[:30]\r\n        return app\r\n    \r\n    # Truncate long titles\r\n    if len(title) > 30:\r\n        return title[:30] + ""...""\r\n    \r\n    return title\r\n\r\ndef get_activity_stats():\r\n    """"""Calculate basic activity statistics""""""\r\n    df = load_windows_data()\r\n    \r\n    if df.empty:\r\n        return {\r\n            ""total_switches"": 0,\r\n            ""unique_apps"": 0,\r\n            ""most_used_app"": ""N/A"",\r\n            ""avg_focus_time"": 0\r\n        }\r\n    \r\n    df['simple_title'] = df['title'].apply(simplify_window_title)\r\n    \r\n    # Remove consecutive duplicates\r\n    df_switches = df[df['simple_title'] != df['simple_title'].shift()]\r\n    \r\n    total_switches = len(df_switches) - 1\r\n    unique_apps = df['simple_title'].nunique()\r\n    \r\n    # Most used app\r\n    app_counts = df['simple_title'].value_counts()\r\n    most_used_app = app_counts.index[0] if len(app_counts) > 0 else ""N/A""\r\n    \r\n    # Average focus time (time between switches)\r\n    df['time_diff'] = df['timestamp'].diff().dt.total_seconds()\r\n    avg_focus_time = df['time_diff'].mean() if len(df) > 1 else 0\r\n    \r\n    return {\r\n        ""total_switches"": total_switches,\r\n        ""unique_apps"": unique_apps,\r\n        ""most_used_app"": most_used_app,\r\n        ""avg_focus_time"": round(avg_focus_time, 1)\r\n    }\r\n\r\n@app.route('/')\r\ndef index():\r\n    """"""Main dashboard page""""""\r\n    return render_template('index.html')\r\n\r\n@app.route('/api/window-transitions')\r\ndef api_window_transitions():\r\n    """"""API endpoint for window transitions data""""""\r\n    data = calculate_window_transitions()\r\n    return jsonify(data)\r\n\r\n@app.route('/api/stats')\r\ndef api_stats():\r\n    """"""API endpoint for activity statistics""""""\r\n    stats = get_activity_stats()\r\n    return jsonify(stats)\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, port=5000)",JSON data file management - Claude – Opera,,0
2025-10-04 15:09:27,"<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n    <meta charset=""UTF-8"">\r\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n    <title>ProcessBot Dashboard</title>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js""></script>\r\n    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3-sankey/0.12.3/d3-sankey.min.js""></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 1400px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            text-align: center;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .header h1 {\r\n            font-size: 3em;\r\n            margin-bottom: 10px;\r\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\r\n        }\r\n\r\n        .header p {\r\n            font-size: 1.2em;\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stats-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 25px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            transition: transform 0.3s ease;\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-5px);\r\n        }\r\n\r\n        .stat-label {\r\n            font-size: 0.9em;\r\n            color: #666;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .stat-value {\r\n            font-size: 2.5em;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.8em;\r\n            color: #333;\r\n            margin-bottom: 20px;\r\n            text-align: center;\r\n        }\r\n\r\n        #sankey-chart {\r\n            width: 100%;\r\n            height: 600px;\r\n            overflow: visible;\r\n        }\r\n\r\n        .loading {\r\n            text-align: center;\r\n            padding: 40px;\r\n            color: #666;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .node rect {\r\n            fill-opacity: 0.9;\r\n            stroke: #000;\r\n            stroke-width: 1px;\r\n        }\r\n\r\n        .node text {\r\n            font-size: 12px;\r\n            fill: #333;\r\n            font-weight: 500;\r\n        }\r\n\r\n        .link {\r\n            fill: none;\r\n            stroke-opacity: 0.3;\r\n        }\r\n\r\n        .link:hover {\r\n            stroke-opacity: 0.6;\r\n        }\r\n\r\n        .tooltip {\r\n            position: absolute;\r\n            background: rgba(0, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            pointer-events: none;\r\n            opacity: 0;\r\n            transition: opacity 0.3s;\r\n            z-index: 1000;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=""container"">\r\n        <div class=""header"">\r\n            <h1>🤖 ProcessBot Dashboard</h1>\r\n            <p>AI-Powered Work Automation Analytics</p>\r\n        </div>\r\n\r\n        <div class=""stats-grid"" id=""stats-grid"">\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Total Window Switches</div>\r\n                <div class=""stat-value"" id=""total-switches"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Unique Applications</div>\r\n                <div class=""stat-value"" id=""unique-apps"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Most Used App</div>\r\n                <div class=""stat-value"" id=""most-used"" style=""font-size: 1.5em;"">-</div>\r\n            </div>\r\n            <div class=""stat-card"">\r\n                <div class=""stat-label"">Avg Focus Time</div>\r\n                <div class=""stat-value"" id=""avg-focus"">-</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=""chart-container"">\r\n            <div class=""chart-title"">Window Transition Flow</div>\r\n            <div id=""sankey-chart"">\r\n                <div class=""loading"">Loading data...</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=""tooltip"" id=""tooltip""></div>\r\n\r\n    <script>\r\n        // Load statistics\r\n        async function loadStats() {\r\n            try {\r\n                const response = await fetch('/api/stats');\r\n                const stats = await response.json();\r\n                \r\n                document.getElementById('total-switches').textContent = stats.total_switches;\r\n                document.getElementById('unique-apps').textContent = stats.unique_apps;\r\n                document.getElementById('most-used').textContent = stats.most_used_app;\r\n                document.getElementById('avg-focus').textContent = stats.avg_focus_time + 's';\r\n            } catch (error) {\r\n                console.error('Error loading stats:', error);\r\n            }\r\n        }\r\n\r\n        // Create Sankey diagram\r\n        async function createSankeyDiagram() {\r\n            try {\r\n                const response = await fetch('/api/window-transitions');\r\n                const data = await response.json();\r\n\r\n                if (!data.nodes || data.nodes.length === 0) {\r\n                    document.getElementById('sankey-chart').innerHTML = \r\n                        '<div class=""loading"">No data available yet. Start collecting data first.</div>';\r\n                    return;\r\n                }\r\n\r\n                // Clear loading message\r\n                document.getElementById('sankey-chart').innerHTML = '';\r\n\r\n                const margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n                const width = document.getElementById('sankey-chart').clientWidth - margin.left - margin.right;\r\n                const height = 600 - margin.top - margin.bottom;\r\n\r\n                // Create SVG\r\n                const svg = d3.select(""#sankey-chart"")\r\n                    .append(""svg"")\r\n                    .attr(""width"", width + margin.left + margin.right)\r\n                    .attr(""height"", height + margin.top + margin.bottom)\r\n                    .append(""g"")\r\n                    .attr(""transform"", `translate(${margin.left},${margin.top})`);\r\n\r\n                // Color scale\r\n                const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n                // Create Sankey layout\r\n                const sankey = d3.sankey()\r\n                    .nodeWidth(20)\r\n                    .nodePadding(20)\r\n                    .extent([[1, 1], [width - 1, height - 5]]);\r\n\r\n                // Generate the Sankey diagram\r\n                const graph = sankey({\r\n                    nodes: data.nodes.map(d => Object.assign({}, d)),\r\n                    links: data.links.map(d => Object.assign({}, d))\r\n                });\r\n\r\n                // Tooltip\r\n                const tooltip = d3.select(""#tooltip"");\r\n\r\n                // Add links\r\n                const link = svg.append(""g"")\r\n                    .attr(""class"", ""links"")\r\n                    .selectAll(""path"")\r\n                    .data(graph.links)\r\n                    .enter().append(""path"")\r\n                    .attr(""class"", ""link"")\r\n                    .attr(""d"", d3.sankeyLinkHorizontal())\r\n                    .attr(""stroke"", d => color(d.source.name))\r\n                    .attr(""stroke-width"", d => Math.max(1, d.width))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`${d.source.name} → ${d.target.name}<br><strong>${d.value}</strong> switches`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add nodes\r\n                const node = svg.append(""g"")\r\n                    .attr(""class"", ""nodes"")\r\n                    .selectAll(""g"")\r\n                    .data(graph.nodes)\r\n                    .enter().append(""g"")\r\n                    .attr(""class"", ""node"");\r\n\r\n                node.append(""rect"")\r\n                    .attr(""x"", d => d.x0)\r\n                    .attr(""y"", d => d.y0)\r\n                    .attr(""height"", d => d.y1 - d.y0)\r\n                    .attr(""width"", d => d.x1 - d.x0)\r\n                    .attr(""fill"", d => color(d.name))\r\n                    .on(""mouseover"", function(event, d) {\r\n                        tooltip\r\n                            .style(""opacity"", 1)\r\n                            .html(`<strong>${d.name}</strong><br>${d.value} transitions`)\r\n                            .style(""left"", (event.pageX + 10) + ""px"")\r\n                            .style(""top"", (event.pageY - 28) + ""px"");\r\n                    })\r\n                    .on(""mouseout"", function() {\r\n                        tooltip.style(""opacity"", 0);\r\n                    });\r\n\r\n                // Add node labels\r\n                node.append(""text"")\r\n                    .attr(""x"", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)\r\n                    .attr(""y"", d => (d.y1 + d.y0) / 2)\r\n                    .attr(""dy"", ""0.35em"")\r\n                    .attr(""text-anchor"", d => d.x0 < width / 2 ? ""start"" : ""end"")\r\n                    .text(d => d.name);\r\n\r\n            } catch (error) {\r\n                console.error('Error creating Sankey diagram:', error);\r\n                document.getElementById('sankey-chart').innerHTML = \r\n                    '<div class=""loading"">Error loading data. Please check console.</div>';\r\n            }\r\n        }\r\n\r\n        // Initialize dashboard\r\n        window.addEventListener('DOMContentLoaded', () => {\r\n            loadStats();\r\n            createSankeyDiagram();\r\n            \r\n            // Refresh every 10 seconds\r\n            setInterval(() => {\r\n                loadStats();\r\n                createSankeyDiagram();\r\n            }, 10000);\r\n        });\r\n    </script>\r\n</body>\r\n</html>",JSON data file management - Claude – Opera,,0
